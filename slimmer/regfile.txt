<vector>

"lazytf.h"
"genjet.h"
"pfvecs.h"
"regression.h"
"TVector2.h"
"TLorentzRotation.h"

{/F}                           ! Default type
{0}                            ! Default value
{reset(panda::Event& e)}       ! Define the arguments of reset

#pv/TVector3 = e.vertices[0].position()

genWeight = e.weight
$ = e.$ | rho
npv = e.npv

pfmet_$ = e.pfMet.$ | pt, phi

event/l = e.eventNumber
run/i = e.runNumber
luminosityBlock/l = e.lumiNumber

isEle <- std::abs(Jet_leptonPdgId) == 11
isMu <- std::abs(Jet_leptonPdgId) == 13
isOther <- not (isEle or isMu)

Jet {
  jet(panda::Jet& jet, gennujet::GenNuVec& withnu, <G> gen)

    puId -> jet.puid
    btagCMVA -> jet.cmva
    btagDeepC -> jet.deepCSVc + jet.deepCSVcc
    btagDeepB -> jet.deepCSVb + jet.deepCSVbb

    (p4 = jet.p4())

    raw -> jet.rawPt/jet.pt()

    $ -> p4.$$() | pt, eta, phi, m, mt, e
    $ -> jet.$ | <{c, n}{e, h}f>

    (info = regression::GetJetInfo(jet))
    $/S -> info.$ | vtxNtrk
    $ -> info.$ | vtxMass, vtx3dL, vtx3deL, vtxPt

    leadTrackPt -> info.maxpfpt

    rawFactor -> 1 - jet.rawPt/[]_pt
    rawEnergy -> []_e * jet.rawPt/[]_pt

    mc$$ -> withnu.genvec.$$() | pt, eta, phi, m
    mcFlavour -> gen->partonFlavor

    $/I -> info.$ | leptonPdgId
    $ -> info.$ | leptonPt, leptonPtRel, leptonPtRelInv, leptonDeltaR

    ptd -> info.ptD
    withPtd <- []_ptd

    energyRing_dR$_@ -> info.@_rings[$].first | 0..6 |@ neut, ch, em, mu
    energyRing_dR$_@_Jet_rawEnergy -> []_energyRing_dR$_@/[]_rawEnergy | 0..6 |@ neut, ch, em, mu

    numDaughters_pt03/s -> info.num03
    numberOfDaughters/s -> jet.constituents.size()

    ! Should it be abs value?
    pfmet_dphi <- TVector2::Phi_mpi_pi(pfmet_phi - []_phi)

    puppi_@_$ -> info.@.$$() | pt, m, e |@ <{charged, neutral}{, _pu}>
    puppi_@_$ -> info.@.filled ? info.@.$$() : []_$ | eta, phi |@ <{charged, neutral}{, _pu}>

DEFINE bkinematics <puppi_{charged, neutral}{, _pu}>

    @_$frac <- []_@_$/[]_$ | pt |@ bkinematics
    @_d$ <- TVector2::Phi_mpi_pi([]_@_$ - []_$) | eta, phi |@ bkinematics

    (transform = pfvecs::get_transform(jet))
    (pfvecs = pfvecs::get_vecs(jet, transform, pv))

DEFINE numpf 0..50

    pf_@/O -> pfvecs.size() > @ |@ numpf
    pf_@_$ -> []_pf_@ ? pfvecs[@].$ : -50 | ptfrac, deta, dphi, puppiwt, dxy, dz |@ numpf
    pf_@_$/B -> []_pf_@ ? pfvecs[@].$ : -10 | q |@ numpf
    pf_@_$/O -> []_pf_@ ? pfvecs[@].$ : 0 | is_ele, is_muon, is_photon, is_nhadron, is_chhadron |@ numpf
    pf_@_X_$ -> []_pf_@ ? pfvecs[@].X.$$() : 0 |X transformed | <p{x, y, z}>, e |@ numpf

    (gen_transformed = transform * withnu.genvec)

    gen_transformed_$ -> gen_transformed.$$() | <p{x, y, z}>, e

    #tf_@/std::vector<float> = {1} \
        <- lazytf::eval("data/freeze_@.pb", "data/regression12.txt", \
           {"split_logits/Slice", "split_logits/Slice_1", "split_logits/Slice_2", "split_logits/Slice_3"}, 1, \
           `./translate.pl data/regression12.txt`) |@ 190723_0

    tf_@_$ <- []_tf_@[=$=] | <trans_{e, px, py, pz}> |@ 190723_0


    gen_ptratio <- []_mcPt/[]_pt
    gen_deta <- []_mcEta - []_eta
    gen_dphi <- TVector2::Phi_mpi_pi([]_mcPhi - []_phi)
    gen_mratio <- []_mcM/[]_m

}
