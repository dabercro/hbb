DEFINE REGS 3, 15, 40

<cmath>
<algorithm>
"PlotTools/interface/KinematicFunctions.h"
"PandaTree/Objects/interface/Event.h"
"misc.h"
"debugevent.h"

{/F}                           ! Default type
{0}                            ! Default value
{reset(panda::Event& event)}   ! Define the arguments of reset

$/i = event.$ | runNumber, lumiNumber
eventNumber/l = event.eventNumber

npv/s = event.npv
npv_true/s = event.npvTrue

mc_weight = event.weight

$@ = event.$@@.pt | pf, calo, trk |@ met
$@phi = event.$@@.phi | pf, calo, trk |@ met

met_trigger/O = false
met_filter/O = event.metFilters.pass()

countjets(panda::Jet& jet, float abseta, LazyCuts& cmva, LazyCuts& csv)
  jet_$[] -> jet.$() | pt, eta
  ? jet_pt[]; jetpt ? -> jet.ptCorr##

! Count some objects
{/b}

  n_alljet -> ++
  n_allhard -> +(jet_pt[] > 30.0)
  n_jet -> +(jet_pt[] > 30.0 && abseta < 2.5)
  n_centerjet -> +(jet_pt[] > 30.0 && abseta < 2.4)

  ~~ abseta < 2.5 ~~
  n_b@_$ -> +(@.$() && jet_pt[] > 25.0) | loose, medium, tight |@ cmva, csv
  min_dphi_metj_soft/F = 4 -> std::min(min_dphi_metj_soft, static_cast<Float_t>(deltaPhi(pfmetphi, jet.phi())));

  ~~ jet.pt() > 30.0 ~~
  min_dphi_metj_hard/F = 4 -> std::min(min_dphi_metj_hard, static_cast<Float_t>(deltaPhi(pfmetphi, jet.phi())));

! Minimum dphi between MET and b-jet (to be declared)
min_dphi_metb/F <- std::min(<deltaPhi(cmva_jet{1, 2}_phi, pfmetphi)>)
n_genB

n_soft {
  , _all {
    softcount(float pt)
      ~~ pt > 2 ~~
      2 -> ++
      ~~ pt > 5 ~~   ! Cuts required to continue
      5 -> ++
      ~~ pt > 10 ~~
      10 -> ++
  }
}

n_pho {
  medium
  tight
  +n_tau {
    loose
  }
}

{/F}

! Save the highest pT of tight lepton
tight_lep_pt

! Save two leptons of each kind
muon, ele {
  lep(panda::Lepton& lep, LepInfo info, LazyCuts& cuts)
    $[] -> info.$ | reliso, corrpt
    q[]/B -> lep.charge

    $[]/O = false -> lep.$ | loose, medium, tight
    $[] -> lep.$() | pt, eta, phi
    count_$/b -> +(cuts.$()) | presel, loose, medium, tight
}

n_lep_$/b <- <{muon + ele}_count_$> | presel, loose, medium, tight

! Some calculated things

"TVector2.h"

{fill(TVector2 recoilvec)}

recoil <- recoilvec.Mod()
recoilphi <- recoilvec.Phi()

dphi_met_trkmet <- deltaPhi(<{pf, trk}metphi>)

! Input jets are used to set the following variables
"btagreaders.h"
! csv, cmva {
cmva {
  <_jet{1, 2, 3}> {
    bjet(panda::Jet& jet, float maxpt, BCalReaders& readers, \
         BTagEntry::JetFlavor flav, <T> nlep, panda::PFCand* lep)
      maxtrk -> maxpt
      $ -> jet.$ | csv, cmva, deepCSVb, deepCMVAb

      ? pt; jetpt; e, m ? -> jet.ptCorr##   ! Indicate pt uncertainty

      sf_@ = 1 -> readers.at(BTagEntry::OP_@@@).eval_auto_bounds("central", flav, <[]_{eta, pt}>) |@ loose, medium, tight
      ? sf_@; btagsf ? = 1 -> readers.at(BTagEntry::OP_@@@).eval_auto_bounds("#", flav, <[]_{eta, pt}>) |@ loose, medium, tight

      ~~ lep ~~

      nlep/b -> nlep
      leadlep_pt -> lep->pt()
      leadlep_ptrel -> lep->p4().Perp(jet.p4().Vect())
      leadlep_dr -> deltaR(<{lep->, jet.}{eta, phi}()>)

    bvert(panda::Ref<panda::SecondaryVertex>& vert)
      ~~ vert.isValid() ~~

      vtx_$ -> vert->$() | pt, m

      vtx_3Dval -> vert->vtx3DVal
      vtx_3Derr -> vert->vtx3DeVal
      vtx_ntrk/s -> vert->ntrk

    genjet(panda::GenJet& gen, GenNuVec& withnu)
      gen/O = false -> true
      gen_$ -> gen.$() | pt, eta, phi, m
      gen_withnu_$ -> withnu.genvec.$$() | pt, eta, phi, m
      gen_numnu/b -> withnu.numnu
      gen_tWnu_overlap/O = false -> withnu.overlap

      gen_$/S -> gen.$ | pdgid, partonFlavor
      gen_$/b -> gen.$ | numB

    +<{, central_}jet{1, 2, 3}> {
      jet(panda::Jet& jet)
        /O = false -> true
        $ -> jet.$() | pt, eta, phi, m, e
        $ -> jet.$ | chf, nhf, cef, nef, qgl
        $/O = false -> jet.$ | loose, tight, monojet

        $frac <- <[]_{c + n}$f> | e, h  ! EM and Had Fractions
    }

    ! Many different regressions to compare!

    #[pt_ratio$_@; data/Regression$_@_BDT.weights.xml] = 1 | , _old |@ REGS
    [pt_ratio_old_method; data/Regression_old_method_BDT.weights.xml] = 1
    [pt_ratio_old; data/bjet_regression_v0.weights.xml; data/bjet_old_sub.txt] = 1

    ! Need a more systematic name system

    pt_reg$ <- []_pt_ratio$ * []_pt | _old, _old_method
    pt_reg$_@ <- []_pt_ratio$_@ * []_pt | , _old |@ REGS

  }

  daughter_$_pt <- std::$(<[]_jet{1, 2}_pt>) | min, max

"TLorentzVector.h"
  _hbb {
    hbb()
      #vec/TLorentzVector = TLorentzVector() -> vectorSum(<[^]_jet{1, 2}_{pt, eta, phi, m}>)
      /O = false -> true
      $ -> []_vec.$$() | pt, eta, phi, m

    hbbgen(panda::GenParticle& gen, float dr)
      gen/O = false -> true
      gen_$ -> gen.$() | pt, eta, phi, m

      gen_dr = 10 -> dr

    pt_over_vpt <- []_pt/recoil
  }

  ! Need a more systematic name system

  hbb_m_reg$ <- vectorSumMass(<[]_jet{1, 2}_{pt_reg$, eta, phi, m}>) | _old, _old_method
  hbb_pt_reg$ <- vectorSumPt(<[]_jet{1, 2}_{pt_reg$, phi}>) | _old, _old_method
  #hbb_m_reg$_@ <- vectorSumMass(<[]_jet{1, 2}_{pt_reg$_@, eta, phi, m}>) | , _old |@ REGS
  #hbb_pt_reg$_@ <- vectorSumPt(<[]_jet{1, 2}_{pt_reg$_@, phi}>) | , _old |@ REGS

  #hbb_reg$_@_over_m <- []_hbb_m_reg$_@/[]_hbb_m | , _old |@ REGS
  hbb_reg$_over_m <- []_hbb_m_reg$/[]_hbb_m | _old, _old_method

  $_dijet_m <- vectorSumMass(<[]_jet{1, 2}_$_{pt, eta, phi, m}>) | gen, gen_withnu
  dphi_uh <- deltaPhi([]_hbb_phi, recoilphi)

  daughter_deta <- std::abs([]_jet1_eta - []_jet2_eta)
  daughter_dphi <- deltaPhi(<[]_jet{1, 2}_phi>)
  daughter_dR <- deltaR(<[]_jet{1, 2}_{eta, phi}>)
}

genboson, gen_t, gen_tbar {
  gen(panda::GenParticle& gen)
    /O = false -> true
    $ -> gen.$() | pt, eta, phi, m

    pdgid/I -> gen.pdgid
}

pdf = 1.0
? pdf; pdf ? = 1.0 +- std::abs(event.genReweight.pdfDW)

r$f@DW = event.genReweight.r$f@DW | 1 |@ 2, 5
r$f@DW = event.genReweight.r$f@DW | 2 |@ 1, 2
r$f@DW = event.genReweight.r$f@DW | 5 |@ 1, 5

![event_class$; data/Classifier_m$_BDT.weights.xml] | , _reg_3, _reg_40

[event_class; data/Classifier_m$_BDT.weights.xml]

! Filter
! These are filled before the fill function
-- debug::debug or (met_filter == 1 and (pfmet > 150 or recoilvec.Mod() > 150) and cmva_hbb and cmva_hbb_pt > 70 and cmva_jet2_cmva > -0.8 and cmva_hbb_m < 550) --
! These are filled in the fill function
++ debug::debug or (cmva_daughter_max_pt > 50 and cmva_daughter_min_pt > 25) ++
