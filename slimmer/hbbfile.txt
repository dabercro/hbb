"PlotTools/interface/KinematicFunctions.h"
"PandaTree/Objects/interface/Event.h"

! Default type
{/F}

! Define the arguments of reset
{reset(panda::Event& event)}

run_num/I = event.runNumber
lumi_num/I = event.lumiNumber
event_num/l = event.eventNumber

npv/I = event.npv
npv_true/I = event.npvTrue

mc_weight = event.weight

met = event.pfMet.pt
metphi = event.pfMet.phi
calomet = event.caloMet.pt
calometphi = event.caloMet.phi
trkmet = event.trkMet.pt
trkmetphi = event.trkMet.phi

met_trigger/O = false
met_filter/O = event.metFilters.pass()

! Default default value is inside {}
! Count some objects
{/I}
{0}

n_alljet
n_jet
n_hardjet

n_bcsv,n_bcmva,n_lep -->

medium
tight

+n_tau,n_pho -->

loose

<--

{/F}
{-5}
! Save two leptons of each kind
muon,ele -->
1,2 --> lep(panda::Lepton& lep, unsigned char flag)

/O = false -> true
1l_2m_3t/b = 0 -> flag
q/B = 0 -> lep.charge
pt -> lep.pt()
eta -> lep.eta()
phi -> lep.phi()

<--

! Input jets are used to set the following variables
"btagreaders.h"
"bcal/BTagCalibrationStandalone.h"
csv_jet,cmva_jet -->
1,2 --> bjet(panda::Jet& jet, float maxpt, BCalReaders& readers, BTagEntry::JetFlavor flav)

maxtrk -> maxpt
csv -> jet.csv
cmva -> jet.cmva
deepcsvb -> jet.deepCSVb
deepcmvab -> jet.deepCMVAb

{1}
loose_sf -> readers.at(BTagEntry::OP_LOOSE).eval_auto_bounds("central", flav, jet.eta(), jet.pt())
loose_sf_up -> readers.at(BTagEntry::OP_LOOSE).eval_auto_bounds("up", flav, jet.eta(), jet.pt())
loose_sf_down -> readers.at(BTagEntry::OP_LOOSE).eval_auto_bounds("down", flav, jet.eta(), jet.pt())

medium_sf -> readers.at(BTagEntry::OP_MEDIUM).eval_auto_bounds("central", flav, jet.eta(), jet.pt())
medium_sf_up -> readers.at(BTagEntry::OP_MEDIUM).eval_auto_bounds("up", flav, jet.eta(), jet.pt())
medium_sf_down -> readers.at(BTagEntry::OP_MEDIUM).eval_auto_bounds("down", flav, jet.eta(), jet.pt())

tight_sf -> readers.at(BTagEntry::OP_TIGHT).eval_auto_bounds("central", flav, jet.eta(), jet.pt())
tight_sf_up -> readers.at(BTagEntry::OP_TIGHT).eval_auto_bounds("up", flav, jet.eta(), jet.pt())
tight_sf_down -> readers.at(BTagEntry::OP_TIGHT).eval_auto_bounds("down", flav, jet.eta(), jet.pt())

! Set the defaults for training stuff to 0
{0}
--> bvert(panda::SecondaryVertex& vert)

vtx_pt -> vert.pt()
vtx_m -> vert.m()
vtx_3Dval -> vert.vtx3DVal
vtx_3Derr -> vert.vtx3DeVal
vtx_ntrk/I -> vert.ntrk

--> bleps(panda::Jet& jet, int nlep, panda::PFCand& lep)

nlep/I -> nlep
leadlep_pt -> lep.pt()
leadlep_ptrel -> lep.p4().Perp(jet.p4().Vect())
leadlep_dr -> deltaR(lep.eta(), lep.phi(), jet.eta(), jet.phi())

! [TMVA_output; weight_file; branch_config]

[pt_ratio; data/TMVA_BDTG.weights.xml; data/branches.txt] = 1

{-5}

pt_reg <- <>_pt_ratio * <>_pt

+jet1,jet2,jet3 --> jet(panda::Jet& jet)

/O = false -> true
pt -> jet.pt()
eta -> jet.eta()
phi -> jet.phi()
m -> jet.m()

emfrac -> jet.cef + jet.nef
chf -> jet.chf
nhf -> jet.nhf

qgl -> jet.qgl

--> genjet(panda::GenJet& gen)

gen/O = false -> true
gen_pt -> gen.pt()
gen_eta -> gen.eta()
gen_phi -> gen.phi()
gen_m -> gen.m()

{/I}
{0}

gen_pdgid -> gen.pdgid
gen_parton_flav -> gen.partonFlavor
gen_num_b -> gen.numB

<--

{/F}
{-5}

! Hbb set by sums of jets as 4-vectors
"TLorentzVector.h"
csv_hbb,cmva_hbb --> hbb(TLorentzVector& vec)

/O = false -> true
pt -> vec.Pt()
eta -> vec.Eta()
phi -> vec.Phi()
m -> vec.M()

<--

genboson,gen_t,gen_tbar --> gen(panda::GenParticle& gen)

/O = false -> true
pt -> gen.pt()
eta -> gen.eta()
phi -> gen.phi()
m -> gen.m()

pdgid/I = 0 -> gen.pdgid

<--

! Some calculated things

"TVector2.h"

{fill(TVector2 recoilvec)}

recoil <- recoilvec.Mod()
recoilphi <- recoilvec.Phi()

dphi_met_trkmet <- deltaPhi(metphi, trkmetphi)

dphi_uh_csv <- deltaPhi(csv_hbb_phi, recoilphi)
dphi_uh_cmva <- deltaPhi(cmva_hbb_phi, recoilphi)
min_dphi_metj_soft = 4
min_dphi_metj_hard = 4
